"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

import environ

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Take environment variables from .env file
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third-party apps
    "rest_framework",
    "django_filters",
    "drf_spectacular",
    "drf_spectacular_sidecar",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "corsheaders",
    "django_extensions",
    # Utility apps
    "utils.cache.apps.CacheConfig",
    # Local apps
    "apps.auth.apps.AuthConfig",
    "apps.user.apps.UserConfig",
    "apps.barbershop.apps.BarbershopConfig",
    "apps.appointment.apps.AppointmentConfig",
    "apps.payment.apps.PaymentConfig",
    "apps.review.apps.ReviewConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # Django CORS Headers
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "middleware.api_tracking_middleware.APIUsageTrackingMiddleware",  # API Tracking
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration for development environment
DATABASES = {
    "default": {
        "ENGINE": env("DB_ENGINE"),
        "NAME": BASE_DIR / env("DB_NAME"),
    }
}

# Cache configuration
# https://docs.djangoproject.com/en/5.2/topics/cache/
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "cache_table",
    },
    # Cache específico para throttling (separado do cache de dados)
    "throttle": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "throttle_cache_table",
    },
}

# Cache settings para diferentes tipos de dados
CACHE_TTL = {
    # Cache de curto prazo (5 minutos) para dados que mudam frequentemente
    "SHORT": 60 * 5,  # 5 minutos
    # Cache médio (30 minutos) para dados semi-estáticos
    "MEDIUM": 60 * 30,  # 30 minutos
    # Cache longo (2 horas) para dados raramente alterados
    "LONG": 60 * 60 * 2,  # 2 horas
    # Cache de listagens (15 minutos)
    "LISTING": 60 * 15,  # 15 minutos
}

# Database configuration for production environment
# DATABASES = {
#     'default': {
#         'ENGINE': env('DB_ENGINE'),
#         'NAME': env('DB_NAME'),
#         'USER': env('DB_USER'),
#         'PASSWORD': env('DB_PASSWORD'),
#         'HOST': env('DB_HOST'),
#         'PORT': env('DB_PORT'),
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "pt-br"

TIME_ZONE = "America/Sao_Paulo"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

STATIC_ROOT = BASE_DIR / "staticfiles"

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Media files (Uploaded by users)

MEDIA_URL = "media/"

MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom user model
AUTH_USER_MODEL = "user.User"

# Django REST Framework settings
REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.NamespaceVersioning",
    "DEFAULT_VERSION": "v1",
    "ALLOWED_VERSIONS": ["v1"],
    "DEFAULT_THROTTLE_CLASSES": [
        "utils.throttles.custom_throttles.CustomAnonRateThrottle",
        "utils.throttles.custom_throttles.CustomUserRateThrottle",
        "rest_framework.throttling.ScopedRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        # Rates para usuários anônimos e autenticados
        "anon": "50/hour",  # 50 requisições por hora para não autenticados
        "user": "500/hour",  # 500 requisições por hora para autenticados
        # Rates específicos por escopo (endpoints críticos)
        "auth": "10/hour",  # Login/registro - 10 tentativas por hora
        "password_reset": "3/hour",  # Reset de senha - 3 tentativas por hora
        "appointments": "30/hour",  # Agendamentos - 30 por hora
        "payments": "20/hour",  # Pagamentos - 20 por hora
        "reviews": "15/hour",  # Reviews - 15 por hora
        "search": "100/hour",  # Buscas - 100 por hora
        # Rates para operações administrativas
        "admin": "1000/hour",  # Operações administrativas
        # Rate limiters por minuto para operações muito sensíveis
        "auth_burst": "5/min",  # Autenticação - burst protection
        "payment_burst": "3/min",  # Pagamentos - burst protection
    },
}

# Django REST Framework Simple JWT settings
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "ON_LOGIN_SUCCESS": "rest_framework_simplejwt.serializers.default_on_login_success",
    "ON_LOGIN_FAILED": "rest_framework_simplejwt.serializers.default_on_login_failed",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
}

# drf-spectacular settings
SPECTACULAR_SETTINGS = {
    "TITLE": "Barbershop API",
    "DESCRIPTION": "A comprehensive REST API for managing barbershop operations, including user authentication, appointment scheduling, payment processing, and customer reviews.",
    "VERSION": "1.0.0",
    "CONTACT": {
        "name": "API Support Team",
        "email": "jotap1101.joaopedro@gmail.com",
    },
    "LICENSE": {
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT"
    },
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": True,
        "persistAuthorization": True,
        "displayOperationId": True,
        "requestSnippetsEnabled": True,
        "requestSnippets": {
            "generators": {
                "curl_bash": {"title": "cURL (bash)"},
                "curl_powershell": {"title": "cURL (PowerShell)"},
                "curl_cmd": {"title": "cURL (CMD)"},
                "javascript_fetch": {"title": "JavaScript (fetch)"},
                "javascript_xhr": {"title": "JavaScript (XHR)"},
                "python_requests": {"title": "Python (requests)"},
                "php_curl": {"title": "PHP (cURL)"},
                "java_okhttp": {"title": "Java (OkHttp)"}
            },
            "defaultExpanded": False,
            "languages": None
        }
    },
    "SWAGGER_UI_DIST": "SIDECAR",
    "SWAGGER_UI_FAVICON_HREF": "SIDECAR",
    "REDOC_DIST": "SIDECAR",
    "SERVE_INCLUDE_SCHEMA": False,
    "COMPONENT_SPLIT_REQUEST": True,
    "COMPONENT_NO_READ_ONLY_REQUIRED": True,
    "COMPONENT_SPLIT_PATCH": True,
    "ENUM_GENERATE_CHOICE_DESCRIPTION": True,
    "ENUM_ADD_EXPLICIT_BLANK_NULL_CHOICE": True,
    "ENUM_NAME_OVERRIDES": {
        "apps.appointment.models.Appointment.Status": "AppointmentStatusEnum",
        "apps.payment.models.Payment.Status": "PaymentStatusEnum",
        "apps.payment.models.Payment.Method": "PaymentMethodEnum",
        "apps.review.models.Review.RATING_CHOICES": "ReviewRatingEnum",
        "apps.user.models.User.USER_TYPE_CHOICES": "UserTypeEnum",
    },
    "SORT_OPERATIONS": True,
    "SCHEMA_COERCE_PATH_PK": True,
    "SCHEMA_PATH_PREFIX": "/api/",
    "SCHEMA_PATH_PREFIX_TRIM": False,
    "SECURITY": [{"BearerAuth": []}],
    "COMPONENTS": {
        "securitySchemes": {
            "BearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "description": "JWT token obtained from the login endpoint",
            }
        }
    },
    "SERVERS": [
        {
            "url": "http://127.0.0.1:8000",
            "description": "Development server",
            "variables": {
                "port": {
                    "default": "8000",
                    "description": "Porta do servidor de desenvolvimento"
                }
            }
        },
        {
            "url": "https://api.yourdomain.com",
            "description": "Production server",
        },
    ],
    "TAGS": [
        {
            "name": "authentication",
            "description": "Operations related to user authentication",
        },
        {
            "name": "users",
            "description": "Operations related to user management",
        },
        {
            "name": "barbershops",
            "description": "Operations related to barbershop management",
        },
        {
            "name": "appointments",
            "description": "Operations related to appointment scheduling and management",
        },
        {
            "name": "payments",
            "description": "Operations related to payment processing and management",
        },
        {
            "name": "reviews",
            "description": "Operations related to customer reviews and ratings",
        },
    ],
}



# django-cors-headers settings
CORS_ALLOW_ALL_ORIGINS = True

# Para produção, usar lista específica:
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000",  # React dev
#     "http://localhost:3001",  # React production build
#     "http://127.0.0.1:3000",  # Local development
#     "http://localhost:8080",  # Vue/Angular dev
#     "http://localhost:4200",  # Angular dev
#     # Adicionar domínios de produção quando disponíveis
# ]

CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "cache-control",
]

CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

CORS_ALLOW_CREDENTIALS = True

CORS_PREFLIGHT_MAX_AGE = 86400  # 24 horas

# logging settings
LOGS_DIR = BASE_DIR / "logs"

if not LOGS_DIR.exists():
    LOGS_DIR.mkdir(exist_ok=True)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "api_tracking": {
            "format": "{asctime} - {levelname} - {message}",
            "style": "{",
        },
        "json": {
            "format": "{message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "api_usage_file": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOGS_DIR / "api_usage.log",
            "maxBytes": 50 * 1024 * 1024,  # 50 MB
            "backupCount": 10,
            "formatter": "json",
        },
        "api_errors_file": {
            "level": "ERROR",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOGS_DIR / "api_errors.log",
            "maxBytes": 10 * 1024 * 1024,  # 10 MB
            "backupCount": 5,
            "formatter": "api_tracking",
        },
        "django_file": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOGS_DIR / "django.log",
            "maxBytes": 10 * 1024 * 1024,  # 10 MB
            "backupCount": 5,
            "formatter": "verbose",
        },
    },
    "loggers": {
        "api_usage": {
            "handlers": ["api_usage_file", "console"],
            "level": "INFO",
            "propagate": False,
        },
        "django": {
            "handlers": ["django_file", "console"],
            "level": "INFO",
            "propagate": False,
        },
        "django.request": {
            "handlers": ["api_errors_file", "console"],
            "level": "ERROR",
            "propagate": False,
        },
        # Logger raiz para desenvolvimento
        "": {
            "handlers": ["console"],
            "level": "INFO",
        },
    },
}
